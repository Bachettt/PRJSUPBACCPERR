from flask import Flask, render_template, request, jsonify
from werkzeug.urls import url_encode
from pysnmp.hlapi import *
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://user:password@10.0.0.4:5434/mydatabase'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class Device(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    description = db.Column(db.String(200), nullable=False)
    nom_machine = db.Column(db.String(200), nullable=False)
    ip_address = db.Column(db.String(50), nullable=False)
    monitoring_interval = db.Column(db.String(200), nullable=True)

def fetch_snmp_data(host, community, oid):
    errorIndication, errorStatus, errorIndex, varBinds = next(
        getCmd(SnmpEngine(),
               CommunityData(community),
               UdpTransportTarget((host, 161)),
               ContextData(),
               ObjectType(ObjectIdentity(oid)))
    )
    
    if errorIndication:
        return str(errorIndication)
    elif errorStatus:
        return str('%s at %s' % (errorStatus.prettyPrint(),
                                 errorIndex and varBinds[int(errorIndex) - 1][0] or '?'))
    else:
        for varBind in varBinds:
            return ' = '.join([x.prettyPrint() for x in varBind])

@app.route('/', methods=['GET', 'POST'])
def index():
    results = []
    if request.method == 'POST':
        host = request.form.get('host', '10.0.0.4')
        oid = request.form.get('oid', '1.3.6.1.2.1.1.1.0')
        description = request.form.get('description')
        nom_machine = request.form.get('nom_machine')
        monitoring_interval = request.form.get('monitoring_interval')
        community = 'public'


        new_device = Device(
            description=description,
            nom_machine=nom_machine,
            ip_address=host,
            monitoring_interval=monitoring_interval,
        )
        try:
            db.session.add(new_device)
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            return str(e), 500
            print(f"Database error: {e}")
            # Ici, vous pouvez gérer l'erreur, par exemple en affichant un message à l'utilisateur.
            #return "Erreur lors de l'ajout à la base de données.", 500

        print("Host:", host)
        print("OID:", oid)

        if not host or not oid:
            return "Host or OID missing!", 400

        result = fetch_snmp_data(host, community, oid)
        results.append(result)

    return render_template('index.html', results=results)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000, debug=True)